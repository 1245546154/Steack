1.硬件提供调用接口（物理接口等，CPU插座，网卡接口，硬盘接口。）

2.操作系统通过硬件提供接口对硬件进行管理和使用（系统提供函数式接口，例如库文件，lib）

3.应用程序通过操作系统提供接口对硬件进行使用（盈通程序也可以用户提供接口 例如GUI）

4.用户态（用户空间程序）：非操作系统的态

5.内核态（操作系统接口程序）：所有运行在操作系统内部的程序


X86平台指令集权划分
Ring 0 ：R0层拥有最高的权限 操作系统工作在R0层，可以访问所有层的数据
Ring 1 ：而其他驱动程序位于R1、R2层，每一层只能访问本层以及权限更低层的数据
Ring 2 ：
Ring 3 ：R3层拥有最低的权限 用程序工作在R3层，只能访问R3层的数据







平台虚拟化X86不能出现异构。

虚拟化分类：从资源提供者角度的分类。



虚拟化实现方式分类
1.Hypervisor（VMM）虚拟化管理程序
一种运行在物理机和虚拟机操作系统之间的中间软件层，可以允许多个操作系统和应用共享硬件，即虚拟机监视器，也称之为VMM。

Hypervisor的功能：增加防护，资源访问控制

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

三个最主要的佳构类包括：

##类型1：虚拟机直接运行在系统硬件上（半虚拟化），创建硬件全仿真实例，被称为“裸机”型。


##类型2：虚拟机运行在传统操作系统上（硬件辅助全虚拟化）硬件全仿真实例，托管（宿主）型/主机型，构建出一套虚拟硬件平台。
性能是三种虚拟机中技术最差的。


##类型3：虚拟机运行在传统操作系统上（操作系统级虚拟化），创建一个独立的虚拟化实例（容器），指向底层托管操作系统，被称操作系统级虚拟化为“操作系统虚拟化”。
所有虚拟机共享内核空间，性能最好，耗费资源最少。
但是缺点是底层和上层必须使用同一种操作系统，如底层操作系统运行的是windows系统。容器不支持windows平台。




KVM：基于内核的虚拟机
是X86架构下硬件辅助的全虚拟话的解决方案。

KVM需要经过修改的QEMU软件，来实现虚拟机的管理。

KVM就是内核的一个模块，用户空间通过QEMU模拟硬件提供给虚拟机使用，一台虚拟机就是一个普通的linux进程，虚拟机中的VCPU就是该进程中的线程。



KVM是全虚拟话方式， 两个模块kvm.ko和kvm_intel.ko（kvm_amd.ko）实质上，KVM就是管理虚拟机硬件设备的驱动。主要负责Ccpu的创建，虚拟内存的分配，Vcpu寄存器的读写以及Ccpu的运行。




yum install nfs-utils recbind 









