方法：指定一个对象具备什么样对的功能和方法，去完成目标。
属性：这个人具备什么样对的功能，具备什么样的属性。
过程：方法步骤，也是一种行为习惯。

面向过程的方式，也可以称之为函数式的过程方式。
每一个步骤都可以看成一个对象，用对象来完成任务。
面向对象开发中，可以包含面向过程的代码。

针对对象来进行分类。
对于


面向过程：是以过程步骤为中心的编程思想。
A=10
B=20
C=A+B


类是抽象的，使用这个具体的存在，一个类可以找到多个对象。

现实中的实体，都可以看成是一个"对象"
对象也是由属性和方法构成的。
在计算机中，必须先有类，在有对象。


类由3个部分组成
类名――属性――方法

一个桌上的苹果 ――>对象
苹果――>类


后面直接加冒号是经典类
后面加括号是新式类

self 能够获得所有对象属性，表示对象本身，对象会被优先的放到方法里面去执行。

实例化的过程，创造一个实例或者是创造一个对象，

魔术方法：
①构造函数：用户初始化类的内部状态，当创建一个对象的时候，会自动调用该方法
②析构函数：释放对象占用的资源，在对象销毁前。

――str――   输出一个对象print（对象）
――del――   对象被销毁 自动调用该方法
――init――  创建对象的时候自动调用

先写伪代码，在写代码去实现它。

面向对象的三大特性
封装：①将属性和方法放到一起作为一个整体，然后通过实例化一个对象来处理
      ②隐藏内部的系统，向外界提供操作的功能即可 print（）
    
继承：①

多态：①方法重写
      ②可能使用父类的方法，也可能使用的是子类的方法

函数装饰器，添加新的功能

魔术方法，会被子类继承。
----------------------------------------------------------------------------------------------------------
#定义一个类

class fangxue:                #定义一个类
    name = 'wo'
    id = '01'
    def a (self):             #定义第一个对象
        print("吃饭")
    def b (self):             #定义第二个对象
        print("睡觉")
    def c (self):             #定义第三个对象
        print("打豆豆")

aa = fangxue()         #实例化的过程（将整个类实例化给aa）
aa.a()                 #就可以使用aa这个属性
aa.b()
aa.c()


----------------------------------------------------------------------------------------------------------
#self

class Person:
    def a (self):
        print("姓名:%s" %(self.name))
    def b (self):
        print("年龄:%s" %(self.age))
    def c (self):
        print("地址:%s" %(self.add))

aa = Person()
aa.name = 'tom'
aa.age = '21'
aa.add = 'beijing'

aa.a()
aa.b()
aa.c()

----------------------------------------------------------------------------------------------------------
#输出第一条狗和第二条狗

class dog:
    def __init__(self,names,legs,ages,colors):
        self.name = names
        self.lig = legs
        self.age = ages
        self.color = colors
    def show(self):
        return ("名字：%s\n腿数：%s\n肤色：%s" %(self.name,self.lig,self.color))

dog1 = dog("GG","4","B","1")
print("第一条狗"+dog1.show())

dog2 = dog("JJ","4","B","1")
print("第二条狗"+dog2.show())

----------------------------------------------------------------------------------------------------------
#加减

class suanshu:
    def __init__(self,passx,passy):
        self.x = passx
        self.y = passy
        self.he = 0
        self.cha = 0

    def sum(self):
        return "%s + %s = %s" %(self.x,self.y,self.x + self.y)
    def sub(self):
        return "%s - %s = %s" %(self.x,self.y,self.x - self.y)
one = suanshu(9,5)

print(one.sum())
print(one.sub())

！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
#调用加减这个模块
import day1

num = day1.suanshu(8,7)

print(num.sum())
print(num.sub())

----------------------------------------------------------------------------------------------------------
#类的多态

class meat(object):
    def __init__(self):
        self.name ="肉"
        self.weight = 2

class ham(meat):
    #pass
    def __init__(self):
        super().__init__()
        self.name = "火腿"
class Persion:
    def eat(self,obj):
        print("他喜欢吃%s" %(obj.name))
rou = meat()
huo = ham()
obj = Persion()

obj.eat(huo)
----------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------
