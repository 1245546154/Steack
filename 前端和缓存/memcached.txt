memcache 和 redis 缓存是：网站首页标签栏，热点数据，session

Memcahce实现集群需要借助第三方软件或者自己设计编程实现，如repcached、memagent、 memcached-ha等。


命中：直接从缓存中读取到想要的数据。 
不命中：缓存中没有想要的数据，还需要到数据库进行一次查询才能读取到想要的数据。 

LNMP架构中网站应用访问流程
浏览器=>web服务器=>后端服务（php)=>数据库（mysql）
访问流程越多，访问速度和出现问题的框架几率也越大
优化访问速度，就需要减少访问步骤


如何对网页的访问或者网站的访问做优化 
根据网页的访问流程，可以进行一下优化

如提高web  服务器并发  负载均衡   nginx 等
页面静态化   把经常访问，但是数据不经常发生变动的动态页面，制作为静态页面
内存缓存优化   把经常访问的数据，加载到内存中使用
数据库优化   很多时候，还需要取数据库信息，所以优化数据库本身

缓存中间件（一般会将数据存储在内存中）降低mysql的读压力，提高整个业务的架构集群稳定和快速响应能力。


缓存服务器的作用：通过使用缓存数据库查询结果，减少数据库的访问次数，以提高动态wec应用的速度，提高可扩展性。

######但是memecache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小

将memcached 部署在单独的一台缓存服务器上 也可以用作于mycat的服务器上

启动服务是 /use/local/memcached/bin/memcached -uroot -d     #-d启动一个守护进程

命令连接和操作依赖于telnet服务   yum install telnet -y  


数据库分为   层次式数据库   网络式数据库   关系式数据库  
nosql not only sql 菲关系型数据库 
NoSQL非关系型数据库

memcached  作为缓存中间件来使用
redis      数据存储到内存中
mongodb    文档存储




------------------------------------------------------------------------------



PHP扩展 

为了LNMP架构中   可以使用memcached缓存 业务代码为PHP 需要安装php的扩展  来实现php操作memcached extension  #memcached扩展  

phpize 把php的bin目录配置到PATH中，如果没有配置的话，可以按照以下的情况手动添加变量 vim /etc/profile  注意生效重载source /etc/profile

PATH=/usr/local/php/bin:$PATH 
export PATH


需要在php.ini配置文件里面开启 

vim /usr/local/php/etc/php.ini  
937行 修改时间为PRC 中华人们共和国的时间
864行 添加memcache扩展文件名    extension=memcache.so

service php restart  




------------------------------------------------------------------------------
memcached 内部不会监视记录是否过期，而是在 get时查看记录的时间戳，检查记录是否过期lazy（惰性）expiration 懒惰机制

如 php的里session机制 懒惰机制 php垃圾回收机制 gc回收

Lazy?Expiration 用来检查记录是否过期 lazy惰性 exoiration   因此memcached 不会在过期监视上耗费 CPU 时间


LRU 机制来分配空间  这是删除“最近最少使用”的记录的机制，因此当memcached的内存空间不足的时候 就从最近未被使用的记录中搜索，并将其空间分配给新的记录。从缓存的实用角度来说，该模型很合理。

LRU：内存管理的一种页面置换算法，对于在内存中不使用的数据库称之为LRU。

不会存满  有懒惰机制  看似是满的 但是会自动删除过期的数据   



key过期了 会被删除吗  当存不下或者过期之后才会被删除    

telnet 

set name 0 8秒 6长度   

懒惰机制：之前版本一直不去检测  新的版本优化之后会进行定期检测

不过有些LRU机制会删除一些 今后想用的缓存   使用-M参数来禁用LRU   写满之后会给出一个错误（内存已满）

热点数据  一般都放在缓存中 

--------------------------------------------------------------------------------

memcache的小工具
memcache.php
用来检测内存缓存的一种web图形化工具  依赖于php


memadmin 用于负责监控的服务器上用来管理多个memcached 需要依赖php 依赖于libevent


ll /usr/local/php/etc/php.ini          #从解压包目录拷贝出来 development是会报错具体代码的配置   production是只报错误  php.ini.xxxxxxxx

--------------------------------------------------------------------------------

session入memcache共享	

session入库，就是重写session制机，在session的周期内，获得到session的数据并记录到数据库

使用分布式架构，负载均衡之后，请求会被分发到不同的服务器，登录或者验证码需要获取存储的session值，如果每次都随机的分配到不同web服务器，就不能够获取到session（生成在web1，校验在web2） 使用ip_hash  同IP用户访问同一个web服务器

通过session共享的方式   入mysql  memcached（内存存储，最优）

以cookie加密的方式保存在客户端.优点是减轻服务器端的压力，缺点是受到cookie的大小限制，可能占用一定带宽

####################################################

session共享：
基于IP地址的Hash策略，将同一用户的请求都集中在一台服务器上，这台服务器上保存了该用户的Session信息

Session复制共享：比如可以用Tomcat自带的插件进行Session同步，使得多台应用服务器之间自动同步Session，保持一致。
如果一台发生故障，负载均衡会遍历寻找可用节点，Session也不会丢失。
缺点：必须是Tomcat和Tomcat之间


一般使用把session写入memcache里面做seesion入库解决session共享的问题

####################################################



web服务器都需要修改,并且web服务器都要安装好memcache扩展

vim /usr/local/nginx/html/tp5shop/application/config.php 
在网页的配置文件里面修改对应的数据（交给开发完成）
驱动方式支持redis和memcache
支持类型用什么存
host存到哪里，是否自动开启SESSION 
auto start = ture 




--------------------------------------------------------------------------------

多实列memcache使用

单台通过监听不同的端口启动多个
/usr/local/memcached/bin/memcached -uroot -d -p11211
/usr/local/memcached/bin/memcached -uroot -d -p11212
/usr/local/memcached/bin/memcached -uroot -d -p11213

--------------------------------------------------------------------------------

缓存热点数据	
把经常访问到的数据，发生变动较小，可以存储到内存缓存中，提供使用速度

vim /usr/local/nginx/html/tp5shop/application/home/controller/Base.php
