
CSV  能将数据库的格式倒出为Excel表格式

更加详细的配置选项是在PHPmyadmin/libraries下的文件夹，复制出config.default.php

HA 高可用 LB 负载均衡 M-S 主从 R-W 读写分离 cache 
CMDB  运维只管数据管理系统


优化（重点！！）：
网站优化的一种
不同业务下解决方案也不一样
在数据量庞大的情况下，必须严格遵照优化
实际做优化都是针对一个点

1.2.3都是减少后端代码访问数据库，砍掉一部分步骤
1.提高并发量
     负载均衡（分布式服务器架构） 并发量更高的软件（Nginx）
2.页面静态化（运维叫：静态页面缓存，由反向代理服务器来做）
     不经常发生数据变动的动态网页生成为静态页面，提高访问速度，一般缓存做几个小时
3.内存缓存优化
     把数据缓存到内存中，提高数据响应速度；内存有个特点，是散存，重启之后会没，可以将当日热点放在内存中
4.数据库优化     
     

访问环节越多，出问题的几率越大，可能响应的时间越慢
优化方式：
1.减少访问步骤环节
2.提高每一个环节步骤的返回速度


MySQL优化方向：
1.存储层    存储引擎  列表型选择  范式（三范式）
2.设计层    索引   缓存    分区表（数据分开存储到不同的表中）
3.sql层     使用执行效率高的sql语句  explain 执行计划   慢查询日志记录
4.架构层    分布式数据库架构   使用多台数据库服务器，解决数据库访问并发的问题


金字塔，顶端成本越高性价比越高
并发最高跳到500，过多互相抢占反而降低效果


show variables like 'innodb_file-per_table';查看该选项是否为开启的，开启的话会将各个innodb存储引擎的表分开储存，否则的话会将所有innodb的引擎的表储存到/data目录下面的一个里面
对数据库处理事务来说，将所有事务看成一个整体来说是方便管理与存储的；但对于业务和查询来说，各个表分开管理效率才高；
set global innodb_file_per_table=1;将该选项开启

存储引擎：
myisam的读取速度快，但写的并发不如innodb，但其表结构将表内容与表索引分开了，可以进行压缩操作，，压缩后需要重新建立索引，压缩后的数据读的速度会活动提升，但同时该表无法写入



压缩：查询需要遍历，压缩后总的大小变小了，需要遍历的大小也小了，所以提示了查询速度、

概念：蠕虫复制：1分2，2分4,4分8,8分16

压缩：myisampack  数据表路径（最后不需要加.MYD，它自己会去加，会显示压缩率，同时需要重建索引）
重建索引：myisamchk -rp 数据表路径
解压：myisamchk --unpack 数据表路径(解压后刷新一下表)


高级功能会特别消耗资源，不用MySQL去实现，由后台业务代码去实现（sql语句越简单越好，不要去用函数不要去用外键）





 